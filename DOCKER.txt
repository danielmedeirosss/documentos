docker ps mostra container ativos
flags
-a mostra todos

docker run roda o container 
flags
-it voce atrela  o terminal com o terminal do container
-d é o modo detect não vai travar o terminal
-P adiciona uma porta externa para acesso 
-p mapear a porta do container (porta host):(porta container)
--name (nomeda imagem)
-e variavel de ambiente
-v (endereço externo no host):(endereço interno) (nome da iagem)
-w para  direcionar o shell para um diretorio ("caminho")
--network (para atrelar ele na rede) docker network create --driver (driver) (nome da rede)


DOCKER info
para ver detalhes 


docker start  (id do container) para startar ele
Flags
-a attach -i interativo usando docker start -a -i voce acessa o container 
docker stop (id) para parar
-t time colocar o numero de segundos do docker

docker inspect (id do container)

criando a propia rede no container
docker network create --driver bridge (nome da rede)
-ls para listar as redes



para remover um container
docker rm (nome da id)
docker container prune ( remove todos os containers inativos)
para remover imagem
docker rmi (nome da imagem)

docker port
para ver a porta que está sendo usada

docker dockersamples/static-site

$() serve para agrupar um comando


CASO ESTEJA USANDO O TOOLBOX e preicsa achar o ip da maquina 
dockermachine ip

para criar builds dentro do docker
docker build
-f (nome do arquivo)
-t ( para tagear/ nome da imagem)

docker login 
para fazer login no docker hub


docker build 
FROM node:latest ( from pegando outra iamgem como base)
MAINTAINER Ubuntu  (o mantenedor)
COPY . /var/www (copy copiar um arquivo para dentro (caminho host) (caminho container)
WORKDIR /var/www (workdir para colocar oshell no diretorio)
RUN npm install ( run rodar comando)
ENTRYPOINT npm start (rodar comando)
EXPOSE 3000 ( expose expo a porta)



DOCKER-MACHINE
Cria uma maquina ja com o docker instalado nela. 
docker-machine create -d virtualbox --virtualbox-no-vtx-check (nome da VM)

 

DOCKER swarm 

Docker swarm init( para inicar o swarm na maquina)
flags
--force-new-cluster
docker service create  -p 8080:3000 (nome do container) (apenas feito no swarm)
flag --mode replicated OU Global (no modo global ele cria uma tarefa em todos os nós)
docker service rm (id do serviço)
docker service rm $(docker servicels -q) para deletar todos os serviços 
docker swarm join-token worker (pegar o tolkien para add um worker)
docker swarm join-token manager (para adicionar um manager)

docker node ls (mostrar estado dos nos) apenas no swarm manager
exibiir somente a coluna que vc deseja --format "{{.nome da coluna}}"
docker service ls (mostra todos os serviços)
docker service ps (nome do serviço) mostra aonde o serviço está rodando
docker node inspect (nome da VM). para fazer o backup do swarm copie esta pasta de volta para o caminho
e inicie com a flag --force-new-cluster
ROUTING MESH
faz que qualquer requisição feita para um membro do swarm seja checada em todo  os nos
utilizando a rede ingress, a rede ingress é iniciada quando o comando docker swarm init é utilizado.
esta rede é iniciada em todos os containers que existem dentro de um swarm e utiliza o driver overlay
docker node rm (id do docker) para remover um container da swarm ( precisa primeiro dar o leave no container)
docker swarm leave ( para tirar o nó  do swarm)
flags
--force para forçar a saida
/var/lib/docker/swarm fica o backup do swarm 

docker node demote (nome do swarm) para rebaixar o swarm
docker node update --availability drain (nome do container) ( para  o serviço  nao rodar neste container)
docker service update --constraint-add node.role==worker (id do serviço)
docker serice update --replicas 4 (nome do serviço) para replicar o serviço que está rodando.


docker stack  deploy --compose-file (nome do arquivo) (nome  do stack)

